---
const navItems = [
  { label: 'Overview', href: '/' },
  { label: 'Portraits', href: '/portraits' },
  { label: 'Bits & Pieces', href: '/bits-and-pieces' },
  { label: 'Film', href: '/film' },
  { label: 'Info', href: '/info' },
];
---

<!-- Desktop Menu - Hidden on mobile -->
<nav class="hidden md:block fixed bottom-6 left-1/2 -translate-x-1/2 z-50">
  <div id="desktopNav" class="bg-black/30 backdrop-blur-sm rounded-full px-2 py-2 flex items-center gap-2 text-white">
    <!-- Toggle Button with Icons -->
    <button
      id="navToggle"
      class="w-10 h-10 rounded-full bg-white/10 hover:bg-white/20 flex items-center justify-center transition-all flex-shrink-0"
      aria-label="Toggle menu"
    >
      <svg id="minusIcon" class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"/>
      </svg>
      <svg id="burgerIcon" class="w-5 h-5 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
      </svg>
    </button>

    <div id="navContent" class="flex items-center gap-2">
      {navItems.map((item) => (
        <a
          href={item.href}
          class="nav-link px-4 py-2 rounded-full transition-all duration-300 text-sm whitespace-nowrap font-medium"
        >
          {item.label}
        </a>
      ))}

      <!-- Instagram -->
      <a
        href="https://www.instagram.com/andrethetraveler/"
        target="_blank"
        rel="noopener noreferrer"
        class="ml-2 w-10 h-10 rounded-full bg-white/10 hover:bg-white/20 flex items-center justify-center transition-all"
        aria-label="Instagram"
      >
        <svg class="w-5 h-5" width="20" height="20" fill="currentColor" viewBox="0 0 24 24">
          <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"/>
        </svg>
      </a>
    </div>
  </div>
</nav>

<!-- Mobile Hamburger Button -->
<button
  id="hamburger"
  class="md:hidden fixed bottom-6 right-6 w-12 h-12 bg-black/30 backdrop-blur-sm rounded-full flex items-center justify-center z-50 text-white"
  aria-label="Open menu"
>
  <svg class="w-6 h-6" width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
  </svg>
</button>

<!-- Mobile Sidebar Overlay -->
<div
  id="sidebarOverlay"
  class="fixed inset-0 bg-black/50 z-[60] opacity-0 pointer-events-none transition-opacity duration-300"
></div>

<!-- Mobile Sidebar -->
<aside
  id="sidebar"
  class="fixed top-0 right-0 h-full w-64 z-[70] translate-x-full transition-transform duration-300 shadow-2xl"
>
  <div class="flex flex-col h-full">
    <!-- Close button -->
    <div class="flex justify-end p-6">
      <button
        id="closeSidebar"
        class="w-10 h-10 rounded-full bg-white/10 hover:bg-white/20 flex items-center justify-center transition-all"
        aria-label="Close menu"
      >
        <svg class="w-5 h-5" width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <!-- Navigation items -->
    <nav class="flex flex-col gap-2 px-6">
      {navItems.map((item) => (
        <a
          href={item.href}
          class="nav-link px-4 py-3 rounded-lg transition-all duration-300 hover:bg-white/10"
        >
          {item.label}
        </a>
      ))}

      <!-- Mobile Instagram -->
      <a
        href="https://www.instagram.com/andrethetraveler/"
        target="_blank"
        rel="noopener noreferrer"
        class="mt-4 px-4 py-3 rounded-lg bg-white/10 hover:bg-white/20 flex items-center justify-center gap-3 transition-all"
        aria-label="Instagram"
      >
        <svg class="w-5 h-5" width="20" height="20" fill="currentColor" viewBox="0 0 24 24">
          <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"/>
        </svg>
        <span>Instagram</span>
      </a>
    </nav>
  </div>
</aside>

<script>
  import { animate } from 'animejs';

  // Small function: toggle desktop nav
  let isNavExpanded = true;
  let isAnimating = false;
  let savedWidth = 0;

  const toggleDesktopNav = () => {
    if (isAnimating) return;

    const navContent = document.getElementById('navContent');
    const minusIcon = document.getElementById('minusIcon');
    const burgerIcon = document.getElementById('burgerIcon');

    if (!navContent || !minusIcon || !burgerIcon) return;

    isAnimating = true;

    if (isNavExpanded) {
      // Collapse - save the width for later
      savedWidth = navContent.offsetWidth;

      animate(minusIcon, {
        opacity: [1, 0],
        duration: 150,
        ease: 'out(2)'
      }).then(() => {
        minusIcon.classList.add('hidden');
        burgerIcon.classList.remove('hidden');

        animate(burgerIcon, {
          opacity: [0, 1],
          duration: 150,
          ease: 'out(2)'
        });
      });

      animate(navContent, {
        opacity: [1, 0],
        width: [savedWidth, 0],
        marginLeft: [8, 0],
        duration: 300,
        ease: 'out(3)'
      }).then(() => {
        navContent.style.display = 'none';
        navContent.style.width = '';
        navContent.style.opacity = '';
        navContent.style.marginLeft = '';
        isAnimating = false;
      });
    } else {
      // Expand - use saved width for smooth reverse animation
      animate(burgerIcon, {
        opacity: [1, 0],
        duration: 150,
        ease: 'out(2)'
      }).then(() => {
        burgerIcon.classList.add('hidden');
        minusIcon.classList.remove('hidden');

        animate(minusIcon, {
          opacity: [0, 1],
          duration: 150,
          ease: 'out(2)'
        });
      });

      navContent.style.display = 'flex';
      navContent.style.width = '0px';
      navContent.style.opacity = '0';
      navContent.style.marginLeft = '0px';

      // Get natural width if not saved yet
      if (savedWidth === 0) {
        const tempWidth = navContent.scrollWidth;
        savedWidth = tempWidth;
      }

      animate(navContent, {
        opacity: [0, 1],
        width: [0, savedWidth],
        marginLeft: [0, 8],
        duration: 300,
        ease: 'out(3)'
      }).then(() => {
        navContent.style.width = '';
        navContent.style.opacity = '';
        navContent.style.marginLeft = '';
        isAnimating = false;
      });
    }

    isNavExpanded = !isNavExpanded;
  };

  // Small function: open sidebar
  const openSidebar = () => {
    const sidebar = document.getElementById('sidebar');
    const overlay = document.getElementById('sidebarOverlay');

    if (sidebar && overlay) {
      sidebar.classList.remove('translate-x-full');
      sidebar.classList.add('translate-x-0');
      overlay.classList.remove('opacity-0', 'pointer-events-none');
      overlay.classList.add('opacity-100', 'pointer-events-auto');
      document.body.style.overflow = 'hidden';
    }
  };

  // Small function: close sidebar
  const closeSidebar = () => {
    const sidebar = document.getElementById('sidebar');
    const overlay = document.getElementById('sidebarOverlay');

    if (sidebar && overlay) {
      sidebar.classList.remove('translate-x-0');
      sidebar.classList.add('translate-x-full');
      overlay.classList.remove('opacity-100', 'pointer-events-auto');
      overlay.classList.add('opacity-0', 'pointer-events-none');
      document.body.style.overflow = '';
    }
  };

  // Small function: init theme based on system preference
  const initTheme = () => {
    // Use system preference
    const isDark = !window.matchMedia('(prefers-color-scheme: light)').matches;

    if (!isDark) {
      document.documentElement.classList.add('light');
    }
  };

  // Small function: set active nav state
  const setActiveNav = (skipTransition = false) => {
    const currentPath = window.location.pathname.replace(/\/$/, '') || '/';
    const navLinks = document.querySelectorAll('.nav-link');

    navLinks.forEach((link) => {
      const href = (link as HTMLAnchorElement).getAttribute('href');
      const isActive = href === currentPath;

      // Temporarily disable transition for initial load
      if (skipTransition) {
        link.classList.add('!transition-none');
      }

      if (isActive) {
        link.classList.add('bg-[#e8e5a0]', 'text-black');
        link.classList.remove('hover:bg-white/10');
        // For desktop nav, add font-medium if not present
        if (!link.classList.contains('py-3')) {
          link.classList.add('font-medium');
        }
      } else {
        link.classList.remove('bg-[#e8e5a0]', 'text-black', 'font-medium');
        link.classList.add('hover:bg-white/10');
      }

      // Re-enable transition after a frame
      if (skipTransition) {
        requestAnimationFrame(() => {
          link.classList.remove('!transition-none');
        });
      }
    });
  };

  // Initialize: bind event listeners
  const initHeader = () => {
    const hamburger = document.getElementById('hamburger');
    const closeBtn = document.getElementById('closeSidebar');
    const overlay = document.getElementById('sidebarOverlay');
    const navToggle = document.getElementById('navToggle');

    hamburger?.addEventListener('click', openSidebar);
    closeBtn?.addEventListener('click', closeSidebar);
    overlay?.addEventListener('click', closeSidebar);
    navToggle?.addEventListener('click', toggleDesktopNav);

    initTheme();
    setActiveNav(true); // Skip transition on initial load
  };

  // Run on load
  initHeader();
</script>

<style>
  #navContent {
    overflow: hidden;
  }
</style>

