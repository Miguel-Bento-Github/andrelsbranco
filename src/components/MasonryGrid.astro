---
import { Image } from 'astro:assets';

interface Props {
  images: Array<{
    id: string;
    src: string;
    original?: string;
    thumbnail?: string;
    videoSrc?: string;
    alt: string;
    width?: number;
    height?: number;
  }>;
}

const { images } = Astro.props;
---

<div class="masonry-grid">
  {images.map((img) => (
    <div
      class="masonry-item opacity-0 cursor-pointer relative"
      data-id={img.id}
      data-video-src={img.videoSrc}
      data-full-src={img.src}
      data-original-src={img.original || img.src}
    >
      <img
        src={img.thumbnail || img.src}
        alt={img.alt}
        width={img.width}
        height={img.height}
        class="masonry-image w-full h-auto object-cover rounded-lg block bg-gray-200 dark:bg-gray-800"
        loading="lazy"
      />
    </div>
  ))}
</div>

<script>
  import { animate } from 'animejs';

  // Extend window interface for prefetch tracking
  declare global {
    interface Window {
      __prefetchedImages?: Set<string>;
    }
  }

  // Prefetch image on hover (shared with gallery.ts tracking)
  const prefetchImage = (src: string) => {
    // Check if already prefetched
    if (window.__prefetchedImages?.has(src)) {
      return;
    }

    // Create hidden image to force browser to load it
    const img = new Image();
    img.src = src;

    // Track prefetched images
    if (!window.__prefetchedImages) {
      window.__prefetchedImages = new Set();
    }
    window.__prefetchedImages.add(src);
  };

  const animateItems = (items: Element[]) => {
    const viewportHeight = window.innerHeight;
    let visibleIndex = 0;

    items.forEach((item) => {
      const rect = item.getBoundingClientRect();
      const isInViewport = rect.top < viewportHeight;

      if (isInViewport) {
        animate(item, {
          opacity: [0, 1],
          translateY: [30, 0],
          duration: 600,
          delay: visibleIndex * 40,
          ease: 'out(4)'
        });
        visibleIndex++;
      } else {
        // Items not in viewport just appear without animation
        animate(item, {
          opacity: [0, 1],
          duration: 0
        });
      }
    });
  };

  const init = () => {
    const items = Array.from(document.querySelectorAll('.masonry-item'));
    if (items.length > 0) {
      animateItems(items);

      // Add hover prefetching
      items.forEach((item) => {
        item.addEventListener('mouseenter', () => {
          const fullSrc = (item as HTMLElement).dataset.fullSrc;
          if (fullSrc) {
            prefetchImage(fullSrc);
          }
        });
      });
    }
  };

  init();
</script>

<style>
  .masonry-grid {
    column-count: 1;
    column-gap: 24px;
    width: 100%;
  }

  /* Mobile: 2 columns */
  @media (min-width: 640px) {
    .masonry-grid {
      column-count: 2;
    }
  }

  /* Tablet: 3 columns */
  @media (min-width: 1024px) {
    .masonry-grid {
      column-count: 3;
    }
  }

  /* Desktop: 4 columns */
  @media (min-width: 1536px) {
    .masonry-grid {
      column-count: 4;
    }
  }

  .masonry-item {
    break-inside: avoid;
    margin-bottom: 24px;
    position: relative;
    overflow: hidden;
    border-radius: 0.5rem;
    cursor: pointer;
    display: block;
  }

  .masonry-item img {
    width: 100%;
    height: auto;
    display: block;
    transition: transform 0.3s ease;
  }

  .masonry-item:hover img {
    transform: scale(1.05);
  }
</style>


