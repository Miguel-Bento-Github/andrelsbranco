---
interface Props {
  images: Array<{
    id: string;
    src: string;
    alt: string;
  }>;
}

const { images } = Astro.props;
---

<div class="masonry-grid">
  {images.map((img) => (
    <div class="masonry-item cursor-pointer relative overflow-hidden" data-id={img.id}>
      <div class="skeleton-loader absolute inset-0 bg-gray-200 dark:bg-gray-800 animate-pulse rounded-lg"></div>
      <img
        src={img.src}
        alt={img.alt}
        class="masonry-image w-full h-full object-cover rounded-lg relative opacity-0 transition-opacity duration-300"
        loading="lazy"
      />
    </div>
  ))}
</div>

<style>
  .masonry-grid {
    column-count: 1;
    column-gap: 24px;
    width: 100%;
  }

  /* Mobile: 2 columns */
  @media (min-width: 640px) {
    .masonry-grid {
      column-count: 2;
    }
  }

  /* Tablet: 3 columns */
  @media (min-width: 1024px) {
    .masonry-grid {
      column-count: 3;
    }
  }

  /* Desktop: 4 columns */
  @media (min-width: 1536px) {
    .masonry-grid {
      column-count: 4;
    }
  }

  .masonry-item {
    break-inside: avoid;
    margin-bottom: 24px;
    position: relative;
    overflow: hidden;
    border-radius: 0.5rem;
    transition: transform 0.3s ease;
    cursor: pointer;
  }

  .masonry-item:hover {
    transform: scale(1.02);
  }

  .masonry-item img {
    width: 100%;
    height: auto;
    display: block;
    transition: transform 0.3s ease, opacity 0.3s ease;
  }

  .masonry-item:hover img {
    transform: scale(1.05);
  }
</style>

<script>
  import { animate } from 'animejs';

  // Show image when loaded
  const init = () => {
    const items = Array.from(document.querySelectorAll('.masonry-item'));

    items.forEach(item => {
      const img = item.querySelector('.masonry-image') as HTMLImageElement;
      const skeleton = item.querySelector('.skeleton-loader');

      if (!img || !skeleton) return;

      const showImage = () => {
        animate(img, {
          opacity: [0, 1],
          duration: 300,
          ease: 'out(2)',
          onComplete: () => {
            skeleton.remove();
          }
        });
      };

      if (img.complete) {
        showImage();
      } else {
        img.addEventListener('load', showImage);
        img.addEventListener('error', showImage);
      }
    });
  };

  init();
</script>

