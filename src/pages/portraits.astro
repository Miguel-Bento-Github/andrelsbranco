---
export const prerender = true;

import { getCollection } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import MasonryGrid from '../components/MasonryGrid.astro';

// Fetch portraits from content collection
const allPortraits = await getCollection('portraits');

// Sort by order (if specified) then by date
const sortedPortraits = allPortraits.sort((a, b) => {
  if (a.data.order !== b.data.order) {
    return a.data.order - b.data.order;
  }
  return new Date(b.data.date).getTime() - new Date(a.data.date).getTime();
});

// Map to image format expected by MasonryGrid
const images = sortedPortraits.map((portrait) => ({
  id: portrait.id,
  src: portrait.data.image,
  alt: portrait.data.title,
  width: portrait.data.width,
  height: portrait.data.height
}));
---

<BaseLayout title="Portraits - André Branco" description="Portrait photography by André Branco">
  <Header />

  <section class="min-h-screen pt-8 pb-20">
    <div class="container mx-auto px-3 md:px-4 max-w-[1920px]">
      <h1 class="text-4xl md:text-5xl font-light  text-center mb-8 tracking-wide">
        Portraits
      </h1>
      <p class="text-center  mb-16 max-w-2xl mx-auto">
        Capturing the essence and character of people through thoughtful composition and lighting.
      </p>
      <MasonryGrid images={images} />
    </div>
  </section>
</BaseLayout>

<script>
  import { openGallery } from '../scripts/gallery';

  const getImageData = (item: Element) => {
    const img = item.querySelector('img');
    return {
      src: img?.src || '',
      alt: img?.alt || ''
    };
  };

  const bindClicks = (items: Element[], images: { src: string; alt: string }[]) => {
    items.forEach((item, index) => {
      item.addEventListener('click', () => {
        openGallery(images, index);
      });
    });
  };

  const init = () => {
    const items = Array.from(document.querySelectorAll('.masonry-item'));
    const images = items.map(getImageData);
    bindClicks(items, images);

    // Check for photo parameter in URL
    const urlParams = new URLSearchParams(window.location.search);
    const photoParam = urlParams.get('photo');
    if (photoParam) {
      const photoIndex = parseInt(photoParam, 10) - 1;
      if (photoIndex >= 0 && photoIndex < images.length) {
        openGallery(images, photoIndex);
      }
    }
  };

  init();
</script>
